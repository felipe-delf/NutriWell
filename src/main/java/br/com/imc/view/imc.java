/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.imc.view;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import br.com.login.DAO.Conexao;
import br.com.menu.view.menu;
import java.sql.Time;
import java.text.SimpleDateFormat;

public class imc extends javax.swing.JFrame {

    private final Conexao conexao;

     public imc() {
        initComponents();
        conexao = new Conexao();
         // Desabilita o botão Gravar IMC inicialmente
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_pesoIMC = new javax.swing.JTextField();
        txt_alturaIMC = new javax.swing.JTextField();
        btn_calcular = new javax.swing.JButton();
        txt_resultadoIMC = new javax.swing.JTextField();
        btn_voltarIMC = new javax.swing.JButton();
        btn_gravarIMC = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_pesoIMC.setFont(new java.awt.Font("Gill Sans MT", 0, 14)); // NOI18N
        txt_pesoIMC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_pesoIMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_pesoIMCActionPerformed(evt);
            }
        });
        getContentPane().add(txt_pesoIMC, new org.netbeans.lib.awtextra.AbsoluteConstraints(284, 229, 170, 41));

        txt_alturaIMC.setFont(new java.awt.Font("Gill Sans MT", 0, 14)); // NOI18N
        txt_alturaIMC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_alturaIMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_alturaIMCActionPerformed(evt);
            }
        });
        getContentPane().add(txt_alturaIMC, new org.netbeans.lib.awtextra.AbsoluteConstraints(284, 312, 170, 41));

        btn_calcular.setContentAreaFilled(false);
        btn_calcular.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calcularActionPerformed(evt);
            }
        });
        getContentPane().add(btn_calcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 380, 130, 30));

        txt_resultadoIMC.setEditable(false);
        txt_resultadoIMC.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        txt_resultadoIMC.setBorder(null);
        getContentPane().add(txt_resultadoIMC, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 430, 530, 30));

        btn_voltarIMC.setText("Voltar");
        btn_voltarIMC.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_voltarIMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_voltarIMCActionPerformed(evt);
            }
        });
        getContentPane().add(btn_voltarIMC, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, -1, -1));

        btn_gravarIMC.setText("Gravar IMC");
        btn_gravarIMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_gravarIMCActionPerformed(evt);
            }
        });
        getContentPane().add(btn_gravarIMC, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 430, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imc.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_alturaIMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_alturaIMCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_alturaIMCActionPerformed

    private void btn_calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calcularActionPerformed

        float p1 = Float.parseFloat(txt_pesoIMC.getText());
        float a1 = Float.parseFloat(txt_alturaIMC.getText());

        float calculo = (p1 / (a1 * a1));

        // Formatar o valor com duas casas decimais
        DecimalFormat df = new DecimalFormat("0.00");
        String calc = df.format(calculo);

        classificacao classificacao = new classificacao();

        if (calculo < 18.5) {
            txt_resultadoIMC.setText("O seu IMC é de " + calc + " e está classificado como: " + classificacao.getMagreza());
        } else if (calculo >= 18.5 && calculo <= 24.9) {
            txt_resultadoIMC.setText("O seu IMC é de " + calc + " e está classificado como: " + classificacao.getNormal());
        } else if (calculo >= 25 && calculo <= 29.9) {
            txt_resultadoIMC.setText("O seu IMC é de " + calc + " e está classificado como: " + classificacao.getSobrepeso());
        } else if (calculo >= 30 && calculo <= 39.9) {
            txt_resultadoIMC.setText("O seu IMC é de " + calc + " e está classificado como: " + classificacao.getObesiadade1());
        } else {
            txt_resultadoIMC.setText("O seu IMC é de " + calc + " e está classificado como: " + classificacao.getObesidade2());
        }


    }//GEN-LAST:event_btn_calcularActionPerformed

    private void btn_voltarIMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_voltarIMCActionPerformed

        menu m = new menu();
        m.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btn_voltarIMCActionPerformed

    private void btn_gravarIMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_gravarIMCActionPerformed
     if (txt_pesoIMC.getText().isEmpty() || txt_alturaIMC.getText().isEmpty()) {
            int escolha = JOptionPane.showOptionDialog(this, "Nenhum dado inserido. Deseja ver os últimos 5 IMCs?", "Erro", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Sim", "Não"}, null);

            if (escolha == JOptionPane.YES_OPTION) {
                verUltimos5IMCs();
            }
            return;
        }

        float peso = Float.parseFloat(txt_pesoIMC.getText());
        float altura = Float.parseFloat(txt_alturaIMC.getText());

        // Cálculo do IMC (Índice de Massa Corporal)
        float imc = peso / (altura * altura);

        String mensagem = "Seu IMC é de " + imc;

        int escolha = JOptionPane.showOptionDialog(this, mensagem, "Gravar IMC", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Gravar Resultado", "Ver Últimos 5 IMCs"}, null);

        if (escolha == JOptionPane.YES_OPTION) {
            gravarIMC(imc);
        } else if (escolha == JOptionPane.NO_OPTION) {
            verUltimos5IMCs();
        }
    }//GEN-LAST:event_btn_gravarIMCActionPerformed

    
    private void txt_pesoIMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_pesoIMCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_pesoIMCActionPerformed


    private void gravarIMC(float imc) {
    try (Connection connection = conexao.getConnection()) {
        String query = "INSERT INTO imc_data (imc, data, horario) VALUES (?, CURDATE(), CURTIME())";
        PreparedStatement statement = connection.prepareStatement(query);
        statement.setFloat(1, imc);
        statement.executeUpdate();
        JOptionPane.showMessageDialog(this, "IMC gravado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        // Limpar os campos de texto
        txt_pesoIMC.setText("");
        txt_alturaIMC.setText("");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao gravar IMC: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

private void verUltimos5IMCs() {
        try (Connection connection = conexao.getConnection()) {
            String query = "SELECT * FROM imc_data ORDER BY id DESC LIMIT 5";
            PreparedStatement statement = connection.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();
            StringBuilder sb = new StringBuilder();
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            while (resultSet.next()) {
                float imc = resultSet.getFloat("imc");
                Date data = resultSet.getDate("data");
                Time horario = resultSet.getTime("horario");
                String dataFormatada = dateFormat.format(data);
                sb.append("IMC: ").append(imc).append(", Data: ").append(dataFormatada).append(", Horário: ").append(horario).append("\n");
            }
            JOptionPane.showMessageDialog(this, sb.toString(), "Últimos 5 IMCs", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao recuperar últimos 5 IMCs: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(imc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(imc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(imc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(imc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new imc().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_calcular;
    private javax.swing.JButton btn_gravarIMC;
    private javax.swing.JButton btn_voltarIMC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txt_alturaIMC;
    private javax.swing.JTextField txt_pesoIMC;
    private javax.swing.JTextField txt_resultadoIMC;
    // End of variables declaration//GEN-END:variables
}
