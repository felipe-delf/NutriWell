/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.alimentos.view;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import br.com.login.DAO.Conexao;
import br.com.menu.view.menu;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.xml.crypto.Data;

public class alimentos extends javax.swing.JFrame {

    private TableRowSorter<DefaultTableModel> sorter;

    /**
     * Creates new form alimentos
     */
    public alimentos() {
        initComponents();
        carregarDadosTabela();
        btn_pesquisar.setText("pesquisar");

        txt_pesquisar.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                filtrarTabela();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                filtrarTabela();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                filtrarTabela();
            }
        });

        tabela.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int columnIndex = tabela.getTableHeader().columnAtPoint(evt.getPoint());
                sorter.setComparator(columnIndex, java.text.Collator.getInstance());
            }
        });

        tabela.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int columnIndex = tabela.getTableHeader().columnAtPoint(evt.getPoint());
                sorter.setComparator(columnIndex, new java.util.Comparator() {
                    @Override
                    public int compare(Object o1, Object o2) {
                        Double d1 = Double.parseDouble(o1.toString());
                        Double d2 = Double.parseDouble(o2.toString());
                        return d1.compareTo(d2);
                    }
                });
            }
        });
    }

    private void carregarDadosTabela() {
        String query = "SELECT nome, calorias, proteinas, carboidratos, gorduras FROM comidas_saudaveis";
        try (Connection conexao = new Conexao().getConnection(); PreparedStatement stmt = conexao.prepareStatement(query); ResultSet rs = stmt.executeQuery()) {

            DefaultTableModel model = (DefaultTableModel) tabela.getModel();
            while (rs.next()) {
                String nome = rs.getString("nome");
                int calorias = rs.getInt("calorias");
                double proteinas = rs.getDouble("proteinas");
                double carboidratos = rs.getDouble("carboidratos");
                double gorduras = rs.getDouble("gorduras");

                Object[] rowData = {nome, calorias, proteinas, carboidratos, gorduras};
                model.addRow(rowData);
            }

            sorter = new TableRowSorter<>(model);
            tabela.setRowSorter(sorter);
        } catch (SQLException e) {
            System.out.println("Erro ao carregar dados da tabela nutricional: " + e.getMessage());
        }
    }

    private void filtrarTabela() {
        String pesquisa = txt_pesquisar.getText();
        if (pesquisa.trim().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + pesquisa)); // O filtro é feito de forma case-insensitive
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        btn_voltarIMC = new javax.swing.JButton();
        txt_pesquisar = new javax.swing.JTextField();
        btn_pesquisar = new javax.swing.JButton();
        btn_inserir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Alimento", "Calorias", "Proteínas", "Carboidratos", "Gorduras"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                tabelaComponentAdded(evt);
            }
        });
        jScrollPane2.setViewportView(tabela);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 40, 630, -1));

        btn_voltarIMC.setText("Voltar");
        btn_voltarIMC.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_voltarIMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_voltarIMCActionPerformed(evt);
            }
        });
        getContentPane().add(btn_voltarIMC, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 470, -1, -1));
        getContentPane().add(txt_pesquisar, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 10, 140, -1));

        btn_pesquisar.setText("pesquisar");
        btn_pesquisar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pesquisarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_pesquisar, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 10, -1, -1));

        btn_inserir.setText("Inserir alimento");
        btn_inserir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_inserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_inserirActionPerformed(evt);
            }
        });
        getContentPane().add(btn_inserir, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 470, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tela limpa.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tabelaComponentAdded

    }//GEN-LAST:event_tabelaComponentAdded

    private void btn_voltarIMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_voltarIMCActionPerformed

        menu m = new menu();
        m.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btn_voltarIMCActionPerformed

    private void btn_pesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pesquisarActionPerformed
        String pesquisa = txt_pesquisar.getText();
        if (pesquisa.trim().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + pesquisa)); // O filtro é feito de forma case-insensitive
        }
    }//GEN-LAST:event_btn_pesquisarActionPerformed

    private void btn_inserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_inserirActionPerformed
        String nome = JOptionPane.showInputDialog(this, "Digite o nome do alimento:");
        if (nome != null && !nome.trim().isEmpty()) {
            // Verificar se o alimento já existe na tabela
            if (verificarAlimentoExistente(nome)) {
                JOptionPane.showMessageDialog(this, "O alimento já existe na tabela.");
                return;
            }

            String caloriasStr = JOptionPane.showInputDialog(this, "Digite a quantidade de calorias:");
            String proteinasStr = JOptionPane.showInputDialog(this, "Digite a quantidade de proteínas:");
            String carboidratosStr = JOptionPane.showInputDialog(this, "Digite a quantidade de carboidratos:");
            String gordurasStr = JOptionPane.showInputDialog(this, "Digite a quantidade de gorduras:");

            try {
                int calorias = Integer.parseInt(caloriasStr);
                double proteinas = Double.parseDouble(proteinasStr);
                double carboidratos = Double.parseDouble(carboidratosStr);
                double gorduras = Double.parseDouble(gordurasStr);

                // Inserir os dados na tabela
                DefaultTableModel model = (DefaultTableModel) tabela.getModel();
                Object[] rowData = {nome, calorias, proteinas, carboidratos, gorduras};
                model.addRow(rowData);

                // Inserir os dados no banco de dados
                inserirDadosNoBanco(nome, calorias, proteinas, carboidratos, gorduras);

                JOptionPane.showMessageDialog(this, "Alimento inserido com sucesso.");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Digite valores válidos para as quantidades.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Digite um nome válido para o alimento.");
        }
    }//GEN-LAST:event_btn_inserirActionPerformed

    private boolean verificarAlimentoExistente(String nome) {
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String nomeTabela = (String) model.getValueAt(i, 0);
            if (nomeTabela.equalsIgnoreCase(nome)) {
                return true;
            }
        }
        return false;
    }

    private void inserirDadosNoBanco(String nome, int calorias, double proteinas, double carboidratos, double gorduras) {
        // Aqui você deve implementar a lógica para inserir os dados no banco de dados.
        // Utilize a classe Conexao para estabelecer a conexão com o banco e execute a inserção dos dados.
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(alimentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(alimentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(alimentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(alimentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new alimentos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_inserir;
    private javax.swing.JButton btn_pesquisar;
    private javax.swing.JButton btn_voltarIMC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabela;
    private javax.swing.JTextField txt_pesquisar;
    // End of variables declaration//GEN-END:variables
}
